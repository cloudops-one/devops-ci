name: "Centralized Docker Operations"
description: "Builds and pushes Docker images to Harbor for any component"

inputs:
  harbor-registry:
    description: "Harbor registry URL"
    required: true
  harbor-username:
    description: "Harbor username"
    required: true
  harbor-password:
    description: "Harbor password"
    required: true
  project-name:
    description: "Project name"
    required: true
  component:
    description: "Component name (frontend, backend, api, etc.)"
    required: true
  docker-tag:
    description: "Docker tag"
    required: true
  dockerfile-path:
    description: "Path to Dockerfile directory"
    required: false
    default: "."
  context-path:
    description: "Build context path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      run: |
        echo "Validating inputs..."
        
        # Check if inputs are provided
        required_inputs=(
          "harbor-registry"
          "harbor-username" 
          "harbor-password"
          "project-name"
          "component"
          "docker-tag"
        )
        
        for input in "${required_inputs[@]}"; do
          if [ -z "$(eval echo \$$input)" ]; then
            echo "‚ùå Error: $input is empty or not provided"
            exit 1
          fi
        done
        
        echo "‚úÖ All inputs validated successfully"
      env:
        harbor-registry: ${{ inputs.harbor-registry }}
        harbor-username: ${{ inputs.harbor-username }}
        harbor-password: ${{ inputs.harbor-password }}
        project-name: ${{ inputs.project-name }}
        component: ${{ inputs.component }}
        docker-tag: ${{ inputs.docker-tag }}
      shell: bash

    - name: Check Dockerfile existence
      run: |
        echo "Checking for Dockerfile at: ${{ inputs.dockerfile-path }}/Dockerfile"
        if [ ! -f "${{ inputs.dockerfile-path }}/Dockerfile" ]; then
          echo "‚ùå Error: Dockerfile not found at ${{ inputs.dockerfile-path }}/Dockerfile"
          exit 1
        fi
        echo "‚úÖ Dockerfile found"
      shell: bash

    - name: Log in to Harbor
      run: |
        echo "üîê Logging into Harbor registry: ${{ inputs.harbor-registry }}"
        
        # Login to Harbor securely without exposing password in logs
        if ! echo "$HARBOR_PASSWORD" | \
           docker login -u "$HARBOR_USERNAME" \
           --password-stdin "$HARBOR_REGISTRY"; then
          echo "‚ùå Failed to login to Harbor"
          exit 1
        fi
        
        echo "‚úÖ Successfully logged into Harbor"
      env:
        HARBOR_REGISTRY: ${{ inputs.harbor-registry }}
        HARBOR_USERNAME: ${{ inputs.harbor-username }}
        HARBOR_PASSWORD: ${{ inputs.harbor-password }}
      shell: bash

    - name: Build Docker Image
      run: |
        echo "üèóÔ∏è Building Docker image..."
        
        # Build the Docker image
        docker build \
          -t $HARBOR_REGISTRY/$PROJECT_NAME/$COMPONENT:$DOCKER_TAG \
          -f $DOCKERFILE_PATH/Dockerfile \
          $CONTEXT_PATH
        
        echo "‚úÖ Docker image built successfully"
      env:
        HARBOR_REGISTRY: ${{ inputs.harbor-registry }}
        PROJECT_NAME: ${{ inputs.project-name }}
        COMPONENT: ${{ inputs.component }}
        DOCKER_TAG: ${{ inputs.docker-tag }}
        DOCKERFILE_PATH: ${{ inputs.dockerfile-path }}
        CONTEXT_PATH: ${{ inputs.context-path }}
      shell: bash

    - name: Push Image to Harbor
      run: |
        echo "üöÄ Pushing image to Harbor..."
        
        # Push the Docker image
        docker push $HARBOR_REGISTRY/$PROJECT_NAME/$COMPONENT:$DOCKER_TAG
        
        echo "‚úÖ Image pushed successfully to Harbor"
      env:
        HARBOR_REGISTRY: ${{ inputs.harbor-registry }}
        PROJECT_NAME: ${{ inputs.project-name }}
        COMPONENT: ${{ inputs.component }}
        DOCKER_TAG: ${{ inputs.docker-tag }}
      shell: bash

    - name: Log out from Harbor
      run: |
        echo "üîí Logging out from Harbor..."
        docker logout "$HARBOR_REGISTRY"
        echo "‚úÖ Logged out successfully"
      env:
        HARBOR_REGISTRY: ${{ inputs.harbor-registry }}
      shell: bash

    - name: Display image information
      run: |
        echo "üìã Image Details:"
        echo "Registry: $HARBOR_REGISTRY"
        echo "Project: $PROJECT_NAME"
        echo "Component: $COMPONENT"
        echo "Tag: $DOCKER_TAG"
        echo "Full Image: $HARBOR_REGISTRY/$PROJECT_NAME/$COMPONENT:$DOCKER_TAG"
      env:
        HARBOR_REGISTRY: ${{ inputs.harbor-registry }}
        PROJECT_NAME: ${{ inputs.project-name }}
        COMPONENT: ${{ inputs.component }}
        DOCKER_TAG: ${{ inputs.docker-tag }}
      shell: bash
