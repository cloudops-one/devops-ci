name: "Centralized Docker Operations"
description: "Builds and pushes Docker images to Harbor for any component"

inputs:
  harbor-registry:
    description: "Harbor registry URL"
    required: true
  harbor-username:
    description: "Harbor username"
    required: true
  harbor-password:
    description: "Harbor password"
    required: true
  project-name:
    description: "Project name"
    required: true
  component:
    description: "Component name (frontend, backend, api, etc.)"
    required: true
  docker-tag:
    description: "Docker tag"
    required: true
  dockerfile-path:
    description: "Path to Dockerfile directory"
    required: false
    default: "."
  context-path:
    description: "Build context path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Validate inputs and secrets
      run: |
        echo "Validating inputs..."
        
        # Check if inputs are provided
        if [ -z "${{ inputs.HARBOR_REGISTRY }}" ]; then
          echo "‚ùå Error: HARBOR_REGISTRY is empty or not provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.HARBOR_USERNAME }}" ]; then
          echo "‚ùå Error: HARBOR_USERNAME is empty or not provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.HARBOR_PASSWORD }}" ]; then
          echo "‚ùå Error: HARBOR_PASSWORD is empty or not provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.project-name }}" ]; then
          echo "‚ùå Error: project-name is empty or not provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.component }}" ]; then
          echo "‚ùå Error: component is empty or not provided"
          exit 1
        fi
        
        if [ -z "${{ inputs.docker-tag }}" ]; then
          echo "‚ùå Error: docker-tag is empty or not provided"
          exit 1
        fi
        
        echo "‚úÖ All inputs validated successfully"
      shell: bash

    - name: Check Dockerfile existence
      run: |
        echo "Checking for Dockerfile at: ${{ inputs.dockerfile-path }}/Dockerfile"
        if [ ! -f "${{ inputs.dockerfile-path }}/Dockerfile" ]; then
          echo "‚ùå Error: Dockerfile not found at ${{ inputs.dockerfile-path }}/Dockerfile"
          exit 1
        fi
        echo "‚úÖ Dockerfile found"
      shell: bash

    - name: Log in to Harbor
      run: |
        echo "üîê Logging into Harbor registry: ${{ inputs.harbor-registry }}"
        
        # Debug: Check if credentials are actually being passed
        echo "Username: ${{ inputs.harbor-username }}"
        echo "Password length: ${#HARBOR_PASSWORD}"
        
        # Login to Harbor
        if ! echo "${{ inputs.harbor-password }}" | \
           docker login -u "${{ inputs.harbor-username }}" \
           --password-stdin "${{ inputs.harbor-registry }}"; then
          echo "‚ùå Failed to login to Harbor"
          exit 1
        fi
        
        echo "‚úÖ Successfully logged into Harbor"
      env:
        HARBOR_PASSWORD: ${{ inputs.harbor-password }}
      shell: bash

    - name: Build Docker Image for ${{ inputs.component }}
      run: |
        echo "üèóÔ∏è Building image: ${{ inputs.harbor-registry }}/${{ inputs.project-name }}/${{ inputs.component }}:${{ inputs.docker-tag }}"
        
        # Build the Docker image
        docker build \
          -t ${{ inputs.harbor-registry }}/${{ inputs.project-name }}/${{ inputs.component }}:${{ inputs.docker-tag }} \
          -f ${{ inputs.dockerfile-path }}/Dockerfile \
          ${{ inputs.context-path }}
        
        echo "‚úÖ Docker image built successfully"
      shell: bash

    - name: Push ${{ inputs.component }} Image to Harbor
      run: |
        echo "üöÄ Pushing image to Harbor..."
        
        # Push the Docker image
        docker push ${{ inputs.harbor-registry }}/${{ inputs.project-name }}/${{ inputs.component }}:${{ inputs.docker-tag }}
        
        echo "‚úÖ Image pushed successfully to Harbor"
      shell: bash

    - name: Log out from Harbor and cleanup
      run: |
        echo "üîí Logging out from Harbor..."
        docker logout "${{ inputs.harbor-registry }}"
        
        # List images for verification
        echo "üì¶ Final image list:"
        docker images | grep "${{ inputs.harbor-registry }}"
        
        echo "üéâ Docker build and push completed successfully!"
      shell: bash

    - name: Display image information
      run: |
        echo "üìã Image Details:"
        echo "Registry: ${{ inputs.harbor-registry }}"
        echo "Project: ${{ inputs.project-name }}"
        echo "Component: ${{ inputs.component }}"
        echo "Tag: ${{ inputs.docker-tag }}"
        echo "Full Image: ${{ inputs.harbor-registry }}/${{ inputs.project-name }}/${{ inputs.component }}:${{ inputs.docker-tag }}"
      shell: bash
