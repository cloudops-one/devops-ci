name: Deploy Ingress to Kubernetes
description: "Deploy Ingress to DigitalOcean Kubernetes cluster with dynamic domain and AWS Route53 DNS"

inputs:
  do-token:
    description: "DigitalOcean API token"
    required: true
  cluster-name:
    description: "DigitalOcean Kubernetes cluster name"
    required: true
  namespace:
    description: "Kubernetes namespace"
    required: true
  project-type:
    description: "Project type (server or admin)"
    required: true
  preview-domain:
    description: "Preview domain to replace placeholder"
    required: true
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: false
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: false
  aws-region:
    description: "AWS Region"
    required: false
    default: "us-east-1"
  aws-hosted-zone-id:
    description: "AWS Route53 Hosted Zone ID"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up doctl
      uses: cloudops-one/action-doctl@v2
      with:
        token: ${{ inputs.do-token }}

    - name: Save kubeconfig
      run: doctl kubernetes cluster kubeconfig save ${{ inputs.cluster-name }}
      shell: bash

    - name: Determine ingress file path and names
      id: ingress-config
      run: |
        if [[ "${{ inputs.project-type }}" == "server" ]]; then
          INGRESS_FILE="devops-ci/k8s/preview/irai-yoga-v1-server/ingress.yaml"
          TLS_SECRET="irai-yoga-v1-server-tls"
          SERVICE_NAME="irai-yoga-v1-preview-svc"
          INGRESS_NAME="irai-yoga-v1-preview-server-ingress"
        elif [[ "${{ inputs.project-type }}" == "admin" ]]; then
          INGRESS_FILE="devops-ci/k8s/preview/irai-yoga-v1-admin/ingress.yaml"
          TLS_SECRET="irai-yoga-v1-admin-tls"
          SERVICE_NAME="irai-yoga-v1-admin-svc"
          INGRESS_NAME="irai-yoga-v1-preview-admin-ingress"
        else
          echo "❌ Unknown project type: ${{ inputs.project-type }}"
          exit 1
        fi
        
        echo "ingress_file=$INGRESS_FILE" >> $GITHUB_OUTPUT
        echo "tls_secret=$TLS_SECRET" >> $GITHUB_OUTPUT
        echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "ingress_name=$INGRESS_NAME" >> $GITHUB_OUTPUT
        echo "Using ingress file: $INGRESS_FILE"
      shell: bash

    - name: Update preview domain in ingress file
      run: |
        INGRESS_FILE="${{ steps.ingress-config.outputs.ingress_file }}"
        PREVIEW_DOMAIN="${{ inputs.preview-domain }}"
        TLS_SECRET="${{ steps.ingress-config.outputs.tls_secret }}"
        SERVICE_NAME="${{ steps.ingress-config.outputs.service_name }}"
        
        echo "Updating preview domain to: $PREVIEW_DOMAIN"
        echo "Using TLS secret: $TLS_SECRET"
        echo "Using service: $SERVICE_NAME"
        
        # Update domain placeholder
        sed -i "s/PREVIEW_DOMAIN_PLACEHOLDER/$PREVIEW_DOMAIN/g" "$INGRESS_FILE"
        # Update TLS secret placeholder
        sed -i "s/TLS_SECRET_PLACEHOLDER/$TLS_SECRET/g" "$INGRESS_FILE"
        # Update service name placeholder
        sed -i "s/SERVICE_NAME_PLACEHOLDER/$SERVICE_NAME/g" "$INGRESS_FILE"
        
        echo "✅ Updated domain, TLS secret, and service in ingress file"
      shell: bash

    - name: Apply Ingress YAML
      run: |
        INGRESS_FILE="${{ steps.ingress-config.outputs.ingress_file }}"
        echo "Applying ingress file $INGRESS_FILE to namespace ${{ inputs.namespace }}"
        kubectl apply -f "$INGRESS_FILE" -n ${{ inputs.namespace }}
        echo "✅ Ingress applied successfully for ${{ inputs.project-type }} project"
      shell: bash

    - name: Configure AWS CLI manually
      if: inputs.aws-access-key-id != ''
      run: |
        # Configure AWS CLI using environment variables
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ inputs.aws-access-key-id }}
        aws_secret_access_key = ${{ inputs.aws-secret-access-key }}
        EOF
        
        cat > ~/.aws/config << EOF
        [default]
        region = ${{ inputs.aws-region }}
        EOF
        
        echo "✅ AWS CLI configured successfully"
        echo "AWS Region: ${{ inputs.aws-region }}"
      shell: bash

    - name: Get LoadBalancer IP and create DNS record
      if: inputs.aws-access-key-id != ''
      id: create-dns
      run: |
        INGRESS_NAME="${{ steps.ingress-config.outputs.ingress_name }}"
        NAMESPACE="${{ inputs.namespace }}"
        DOMAIN="${{ inputs.preview-domain }}"
        HOSTED_ZONE_ID="${{ inputs.aws-hosted-zone-id }}"
        
        echo "Waiting for LoadBalancer IP for ingress: $INGRESS_NAME..."
        
        # Wait for LoadBalancer IP
        for i in {1..30}; do
          LB_IP=$(kubectl get ingress $INGRESS_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$LB_IP" ]; then
            echo "✅ LoadBalancer IP found: $LB_IP"
            break
          fi
          echo "Attempt $i: LoadBalancer IP not ready yet, waiting 10 seconds..."
          sleep 10
        done
        
        if [ -z "$LB_IP" ]; then
          echo "❌ Failed to get LoadBalancer IP after 5 minutes"
          kubectl get ingress -n $NAMESPACE
          exit 1
        fi
        
        # Create Route53 DNS record
        echo "Creating DNS record: $DOMAIN -> $LB_IP"
        
        cat > route53-change.json << EOF
        {
          "Changes": [
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "$DOMAIN.",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [
                  {
                    "Value": "$LB_IP"
                  }
                ]
              }
            }
          ]
        }
        EOF
        
        echo "Route53 change batch:"
        cat route53-change.json
        
        # Create DNS record using AWS CLI
        aws route53 change-resource-record-sets \
          --hosted-zone-id "$HOSTED_ZONE_ID" \
          --change-batch file://route53-change.json
        
        echo "✅ DNS record created: $DOMAIN -> $LB_IP"
        echo "Preview URL: https://$DOMAIN"
        echo "lb_ip=$LB_IP" >> $GITHUB_OUTPUT
      shell: bash

    - name: Verify DNS propagation
      if: inputs.aws-access-key-id != ''
      run: |
        DOMAIN="${{ inputs.preview-domain }}"
        echo "Checking DNS propagation for: $DOMAIN"
        
        # Install dig if not available
        if ! command -v dig &> /dev/null; then
          echo "Installing dnsutils for dig command..."
          sudo apt-get update && sudo apt-get install -y dnsutils
        fi
        
        # Wait for DNS to propagate
        for i in {1..12}; do
          RESOLVED_IP=$(dig +short "$DOMAIN" | head -1)
          if [ -n "$RESOLVED_IP" ]; then
            echo "✅ DNS is resolving: $DOMAIN -> $RESOLVED_IP"
            break
          fi
          echo "Attempt $i: DNS not propagating yet, waiting 10 seconds..."
          sleep 10
        done
        
        if [ -n "$RESOLVED_IP" ]; then
          echo "🎉 Preview environment is ready!"
          echo "🌐 Access your preview at: https://$DOMAIN"
        else
          echo "⚠️ DNS might still be propagating. The domain will be available soon."
          echo "🔗 Preview URL: https://$DOMAIN"
        fi
      shell: bash
