name: 'SonarQube Scan (Gradle Backend)'
description: 'Run SonarQube analysis for Java backend projects built with Gradle'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube server URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Project version (e.g., build number or tag)'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  java-version:
    description: 'Java version'
    default: '17'

runs:
  using: 'composite'
  steps:
    - name: Fail if required inputs are missing
      shell: bash
      run: |
        if [[ -z "${{ inputs.sonar-token }}" ]]; then
          echo "❌ Missing SonarQube token (sonar-token input)"
          exit 1
        fi
        if [[ -z "${{ inputs.sonar-host-url }}" ]]; then
          echo "❌ Missing SonarQube host URL (sonar-host-url input)"
          exit 1
        fi

    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java
      uses: cloudops-one/setup-java@v4
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'

    - name: Make Gradle executable
      shell: bash
      run: chmod +x ./gradlew

    - name: Build project (skip tests & spotless)
      shell: bash
      run: ./gradlew clean build -x test -x spotlessCheck

    - name: Run SonarQube Analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "Running SonarQube analysis for Gradle project..."
        sonar-scanner \
          -Dsonar.projectKey=${{ inputs.project-key }} \
          -Dsonar.projectName=${{ inputs.project-name }} \
          -Dsonar.projectVersion=${{ inputs.docker-tag }} \
          -Dsonar.branch.name=${{ inputs.branch-name }} \
          -Dsonar.sources=src/main/java \
          -Dsonar.java.binaries=build/classes/java/main \
          -Dsonar.java.source=${{ inputs.java-version }} \
          -Dsonar.java.buildDir=build \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.scm.provider=git

    - name: SonarQube Scan Summary
      shell: bash
      run: |
        echo "=== SonarQube Scan Completed ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "SonarQube Server: ${{ inputs.sonar-host-url }}"
