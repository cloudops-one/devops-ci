name: 'SonarQube Scan'
description: 'SonarQube code quality scanning with JaCoCo report generation'

inputs:
  sonar-token:
    required: true
  sonar-host-url:
    required: true
  project-key:
    required: true
  project-name:
    required: true
  docker-tag:
    required: true
  branch-name:
    required: true
  sources-path:
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permissions for Gradle
      run: chmod +x ./gradlew
      shell: bash

    - name: Apply Spotless Formatting
      run: ./gradlew spotlessApply --no-daemon
      shell: bash

    - name: Configure JaCoCo for XML reports
      run: |
        echo "=== Configuring JaCoCo to generate XML reports ==="
        
        # Check current JaCoCo configuration
        echo "=== Current JaCoCo configuration ==="
        ./gradlew jacocoTestReport --dry-run --no-daemon
        
        # Create a temporary gradle script to configure XML reports
        cat >> jacoco-xml-config.gradle << 'EOF'
jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
        csv.required = false
    }
}
EOF
        
        echo "=== Running tests with XML configuration ==="
        ./gradlew clean test jacocoTestReport -I jacoco-xml-config.gradle --no-daemon
        
        echo "=== Checking for XML report ==="
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report generated successfully"
          ls -la build/reports/jacoco/test/jacocoTestReport.xml
        else
          echo "⚠️ XML report still not generated, but execution data exists"
          echo "Available JaCoCo files:"
          find build -name "*jacoco*" -type f
        fi
      shell: bash

    - name: SonarQube Scan (with execution data fallback)
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "=== Running SonarQube Scan ==="
        
        # Check if XML report exists
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "Using JaCoCo XML report for coverage"
          XML_REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
        else
          echo "Using JaCoCo execution data for coverage"
          XML_REPORT_PATH="build/jacoco/test.exec"
        fi
        
        ./gradlew sonar \
          -Dsonar.projectKey="${{ inputs.project-key }}" \
          -Dsonar.projectName="${{ inputs.project-name }}" \
          -Dsonar.projectVersion="${{ inputs.docker-tag }}" \
          -Dsonar.branch.name="${{ inputs.branch-name }}" \
          -Dsonar.coverage.jacoco.xmlReportPaths=$XML_REPORT_PATH \
          --no-daemon
      shell: bash

    - name: Summary
      run: |
        echo "=== ✅ SonarQube Scan Complete ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Version: ${{ inputs.docker-tag }}"
      shell: bash
