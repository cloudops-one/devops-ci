name: 'SonarQube Scan'
description: 'SonarQube code quality scanning for Backend'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube host URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Docker tag for project version'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  sources-path:
    description: 'Path to source code'
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Make gradlew executable
      shell: bash
      run: |
        chmod +x ./gradlew

    - name: Format code with Spotless
      shell: bash
      run: |
        ./gradlew spotlessApply --no-daemon

    - name: Build with preview features enabled
      shell: bash
      run: |
        ./gradlew clean compileJava --no-daemon --info

    - name: Run tests with coverage
      shell: bash
      run: |
        ./gradlew test jacocoTestReport jacocoTestCoverageVerification \
          --no-daemon \
          --info

    - name: Verify coverage reports
      shell: bash
      run: |
        echo "=== Coverage Report Verification ==="
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report generated successfully"
        else
          echo "❌ JaCoCo XML report not found"
          exit 1
        fi

    - name: Run SonarQube analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        ./gradlew sonarqube \
          -Dsonar.branch.name="${{ inputs.branch-name }}" \
          -Dsonar.projectVersion="${{ inputs.docker-tag }}" \
          --no-daemon \
          --info

    - name: Analysis summary
      shell: bash
      run: |
        echo "=== SonarQube Analysis Complete ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "================================"
