name: 'SonarQube Scan'
description: 'SonarQube code quality scanning with JaCoCo report generation'

inputs:
  sonar-token:
    required: true
  sonar-host-url:
    required: true
  project-key:
    required: true
  project-name:
    required: true
  docker-tag:
    required: true
  branch-name:
    required: true
  sources-path:
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permissions for Gradle
      run: chmod +x ./gradlew
      shell: bash

    - name: Apply Spotless Formatting
      run: ./gradlew spotlessApply --no-daemon
      shell: bash

    - name: Debug JaCoCo configuration
      run: |
        echo "=== Checking Gradle JaCoCo configuration ==="
        ./gradlew properties --no-daemon | grep jacoco || echo "No jacoco properties found"
        
        echo "=== Checking available tasks ==="
        ./gradlew tasks --no-daemon | grep jacoco || echo "No jacoco tasks found"
        
        echo "=== Checking build directory before tests ==="
        ls -la build/ || echo "No build directory"
      shell: bash

    - name: Run tests with JaCoCo and generate report
      run: |
        echo "=== Running tests with coverage ==="
        ./gradlew clean test jacocoTestReport --no-daemon --info
        
        echo "=== Checking for JaCoCo files after report generation ==="
        find . -name "*jacoco*" -type f
        
        echo "=== Build reports directory ==="
        ls -la build/reports/ || echo "No reports directory"
        
        echo "=== Checking if jacocoTestReport actually exists ==="
        ./gradlew help --task jacocoTestReport --no-daemon || echo "jacocoTestReport task not available"
      shell: bash

    - name: Generate JaCoCo XML report manually if needed
      run: |
        echo "=== Checking if we need to generate XML manually ==="
        
        # Check if XML report exists
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report exists"
        else
          echo "JaCoCo XML report missing, checking for execution data..."
          
          # Check for .exec file
          if [ -f "build/jacoco/test.exec" ]; then
            echo "Found test.exec file, SonarQube can use this directly"
          else
            echo "No test.exec file found either"
          fi
          
          # List all files in build directory for debugging
          echo "=== All files in build directory ==="
          find build -type f | head -30
        fi
      shell: bash

    - name: SonarQube Scan (using execution data if XML missing)
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "=== Running SonarQube Scan ==="
        
        # Run sonar with explicit JaCoCo configuration
        ./gradlew sonar \
          -Dsonar.projectKey="${{ inputs.project-key }}" \
          -Dsonar.projectName="${{ inputs.project-name }}" \
          -Dsonar.projectVersion="${{ inputs.docker-tag }}" \
          -Dsonar.branch.name="${{ inputs.branch-name }}" \
          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/jacocoTestReport.xml \
          -Dsonar.coverage.jacoco.xmlReportPaths=build/jacoco/test/jacocoTestReport.xml \
          --no-daemon
      shell: bash

    - name: Summary
      run: |
        echo "=== ✅ SonarQube Scan Complete ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Version: ${{ inputs.docker-tag }}"
      shell: bash
