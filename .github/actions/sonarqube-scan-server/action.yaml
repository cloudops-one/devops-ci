name: 'SonarQube Scan (Gradle Backend)'
description: 'Run SonarQube analysis for Java backend projects built with Gradle'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube server URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Project version (e.g., build number or tag)'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  java-version:
    description: 'Java version'
    default: '17'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: cloudops-one/setup-java@v4
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'

    - name: Install SonarScanner
      shell: bash
      run: npm install -g sonar-scanner

    - name: Build project with Gradle (skip tests and spotless)
      shell: bash
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test -x spotlessCheck -x spotlessApply

    - name: Debug Input Parameters
      shell: bash
      run: |
        echo "=== Debug Input Parameters ==="
        echo "Sonar Host URL: '${{ inputs.sonar-host-url }}'"
        echo "Project Key: '${{ inputs.project-key }}'"
        echo "Project Name: '${{ inputs.project-name }}'"
        echo "Token present: ${{ inputs.sonar-token != '' }}"
        echo "Branch: '${{ inputs.branch-name }}'"
        echo "Version: '${{ inputs.docker-tag }}'"

    - name: Run SonarQube Analysis
      shell: bash
      run: |
        echo "Running SonarQube analysis for Gradle project..."
        
        # Create a sonar-project.properties file as alternative approach
        cat > sonar-project.properties << EOF
        sonar.projectKey=${{ inputs.project-key }}
        sonar.projectName=${{ inputs.project-name }}
        sonar.projectVersion=${{ inputs.docker-tag }}
        sonar.branch.name=${{ inputs.branch-name }}
        sonar.sources=src/main/java
        sonar.java.binaries=build/classes/java/main
        sonar.java.source=${{ inputs.java-version }}
        sonar.java.buildDir=build
        sonar.host.url=${{ inputs.sonar-host-url }}
        sonar.login=${{ inputs.sonar-token }}
        sonar.qualitygate.wait=true
        sonar.scm.provider=git
        EOF
        
        echo "=== sonar-project.properties content ==="
        cat sonar-project.properties
        echo "========================================"
        
        # Run sonar-scanner with the properties file
        sonar-scanner

    - name: SonarQube Analysis Summary
      shell: bash
      run: |
        echo "=== SonarQube Scan Summary ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Language: Java (Gradle)"
        echo "SonarQube Server: ${{ inputs.sonar-host-url }}"
        echo "Status: âœ… Completed (check SonarQube dashboard)"
