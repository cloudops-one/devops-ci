name: 'SonarQube Scan'
description: 'Centralized SonarQube code quality scanning for Backend'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube host URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Docker tag for project version'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  sources-path:
    description: 'Path to source code'
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK for SonarScanner
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      shell: bash
      run: |
        echo "Using system Gradle wrapper"

    - name: Build project
      shell: bash
      run: |
        echo "Building project..."
        ./gradlew clean build
        echo "✓ Build completed"

    - name: Run SonarQube Analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "Running SonarQube analysis..."
        
        # Build parameters array
        PARAMS=(
          "-Dsonar.projectKey=${{ inputs.project-key }}"
          "-Dsonar.projectName=${{ inputs.project-name }}"
          "-Dsonar.projectVersion=${{ inputs.docker-tag }}"
          "-Dsonar.sources=${{ inputs.sources-path }}"
          "-Dsonar.exclusions=**/test/**,**/build/**,**/gradle/**,**/*.gradle"
          "-Dsonar.tests=${{ inputs.sources-path }}"
          "-Dsonar.test.inclusions=**/*Test.java,**/*Tests.java,**/*Spec.java"
          "-Dsonar.java.binaries=build/classes"
          "-Dsonar.junit.reportPaths=build/test-results/test"
          "-Dsonar.sourceEncoding=UTF-8"
          "-Dsonar.qualitygate.wait=true"
        )
        
        # Add branch analysis parameters
        if [[ "${{ inputs.branch-name }}" == "PR-"* ]]; then
          PARAMS+=("-Dsonar.pullrequest.branch=${{ inputs.branch-name }}")
          echo "✓ PR analysis mode"
        else
          PARAMS+=("-Dsonar.branch.name=${{ inputs.branch-name }}")
          echo "✓ Branch analysis mode"
        fi
        
        echo "SonarQube parameters:"
        for param in "${PARAMS[@]}"; do
          echo "  $param"
        done
        
        # Run SonarQube via Gradle
        ./gradlew sonarqube "${PARAMS[@]}"
        
        echo "✓ SonarQube analysis completed successfully!"

    - name: SonarQube Analysis Summary
      shell: bash
      run: |
        echo "=== SonarQube Backend Scan Summary ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Source Path: ${{ inputs.sources-path }}"
        echo "=============================="
