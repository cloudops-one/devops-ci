name: 'SonarQube Scan'
description: 'SonarQube code quality scanning with JaCoCo report generation'

inputs:
  sonar-token:
    required: true
  sonar-host-url:
    required: true
  project-key:
    required: true
  project-name:
    required: true
  docker-tag:
    required: true
  branch-name:
    required: true
  sources-path:
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permissions for Gradle
      run: chmod +x ./gradlew
      shell: bash

    - name: Apply Spotless Formatting
      run: ./gradlew spotlessApply --no-daemon
      shell: bash

    - name: Generate JaCoCo XML report with tests
      run: |
        echo "=== Running tests and generating JaCoCo report ==="
        ./gradlew clean test jacocoTestReport --no-daemon
        
        echo "=== Searching for JaCoCo XML report ==="
        find . -name "*.xml" -path "*/jacoco/*" | head -10
        
        # Check multiple possible locations
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report found at standard location"
        elif [ -f "build/reports/jacoco/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report found at alternative location"
        elif [ -f "build/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ JaCoCo XML report found in jacoco directory"
        else
          echo "=== Debug: All build files ==="
          find build -name "*.xml" -type f | head -20
          echo "=== Debug: Build directory structure ==="
          ls -la build/ || echo "No build directory"
          echo "❌ JaCoCo XML report not found in any expected location"
          exit 1
        fi
      shell: bash

    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        ./gradlew sonar \
          -Dsonar.projectKey="${{ inputs.project-key }}" \
          -Dsonar.projectName="${{ inputs.project-name }}" \
          -Dsonar.projectVersion="${{ inputs.docker-tag }}" \
          -Dsonar.branch.name="${{ inputs.branch-name }}" \
          --no-daemon
      shell: bash

    - name: Summary
      run: |
        echo "=== ✅ SonarQube Scan Complete ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Version: ${{ inputs.docker-tag }}"
      shell: bash
