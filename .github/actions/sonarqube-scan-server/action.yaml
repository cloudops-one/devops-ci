name: 'SonarQube Scan Server'
description: 'Run SonarQube scan for backend projects using Gradle'

inputs:
  sonar-token:
    description: 'SonarQube authentication token'
    required: true
  sonar-host-url:
    description: 'SonarQube server URL'
    required: true
  project-key:
    description: 'Unique key for the SonarQube project'
    required: true
  project-name:
    description: 'Name of the SonarQube project'
    required: true
  docker-tag:
    description: 'Docker tag (used for branch metadata)'
    required: true
  branch-name:
    description: 'Branch name to associate with the scan'
    required: true
  sources-path:
    description: 'Path to source files (e.g., src/main/java)'
    required: true
  coverage-path:
    description: 'Path to JaCoCo coverage report XML'
    required: false
    default: ''
  java-version:
    description: 'Java version to use'
    required: false
    default: '17'
  language:
    description: 'Programming language (default java)'
    required: false
    default: 'java'

runs:
  using: "composite"
  steps:
    - name: Setup Java
      uses: cloudops-one/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java-version }}

    - name: Build Project (skip tests)
      run: ./gradlew build -x test
      shell: bash

    - name: Run SonarQube Scan
      run: |
        ./gradlew sonarqube \
          -Dsonar.projectKey=${{ inputs.project-key }} \
          -Dsonar.projectName=${{ inputs.project-name }} \
          -Dsonar.host.url=${{ inputs.sonar-host-url }} \
          -Dsonar.login=${{ inputs.sonar-token }} \
          -Dsonar.sources=${{ inputs.sources-path }} \
          -Dsonar.branch.name=${{ inputs.branch-name }} \
          $([[ -n "${{ inputs.coverage-path }}" ]] && echo "-Dsonar.coverage.jacoco.xmlReportPaths=${{ inputs.coverage-path }}")
      shell: bash
