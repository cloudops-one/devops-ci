name: 'SonarQube Scan'
description: 'Centralized SonarQube code quality scanning for Backend'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube host URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Docker tag for project version'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  sources-path:
    description: 'Path to source code'
    default: 'src'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK for SonarScanner
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Make gradlew executable
      shell: bash
      run: |
        chmod +x ./gradlew
        ls -la gradlew

    # Step 1: Apply Spotless formatting
    - name: Apply Spotless formatting
      shell: bash
      run: |
        echo "Running Spotless auto-format..."
        ./gradlew spotlessApply
        echo "✓ Spotless formatting applied successfully"

    # Step 2: Build + tests + Jacoco coverage
    - name: Build project with tests and coverage
      shell: bash
      run: |
        echo "Building project and generating Jacoco coverage..."
        ./gradlew clean build jacocoTestReport
        echo "✓ Build and coverage completed"

    # Step 3: Run SonarQube analysis
    - name: Run SonarQube Analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "Running SonarQube analysis..."
        
        ./gradlew sonarqube \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.projectKey="${{ inputs.project-key }}" \
          -Dsonar.projectName="${{ inputs.project-name }}" \
          -Dsonar.projectVersion="${{ inputs.docker-tag }}" \
          -Dsonar.sources="${{ inputs.sources-path }}" \
          -Dsonar.exclusions="**/test/**,**/build/**,**/gradle/**,**/*.gradle" \
          -Dsonar.tests="${{ inputs.sources-path }}" \
          -Dsonar.test.inclusions="**/*Test.java,**/*Tests.java,**/*Spec.java" \
          -Dsonar.java.binaries="build/classes" \
          -Dsonar.coverage.jacoco.xmlReportPaths="build/reports/jacoco/test/jacocoTestReport.xml" \
          -Dsonar.java.libraries="build/libs/*.jar" \
          -Dsonar.gradle.skipCompile=true \
          -Dsonar.sourceEncoding="UTF-8" \
          -Dsonar.qualitygate.wait=true

        echo "✓ SonarQube analysis completed successfully!"

    # Step 4: Summary
    - name: SonarQube Analysis Summary
      shell: bash
      run: |
        echo "=== SonarQube Backend Scan Summary ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Source Path: ${{ inputs.sources-path }}"
        echo "Edition: Community (branch analysis disabled)"
        echo "=============================="
