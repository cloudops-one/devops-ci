name: 'Deploy Service to Kubernetes'
description: 'Centralized service deployment for preview environments'

inputs:
  do-token:
    description: 'DigitalOcean API token'
    required: true
  cluster-name:
    description: 'DigitalOcean Kubernetes cluster name'
    required: true
  namespace:
    description: 'Kubernetes namespace'
    required: true
  project-type:
    description: 'Project type (server or admin)'
    required: true
  branch-name:
    description: 'Branch name for dynamic resource naming'
    required: true
  port:
    description: 'Service port'
    required: false
    default: '80'
  target-port:
    description: 'Container target port'
    required: false
    default: '8080'

runs:
  using: 'composite'
  steps:
    - name: Debug inputs
      shell: bash
      run: |
        echo "üîç Centralized Service Deployment:"
        echo "Project: ${{ inputs.project-type }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Namespace: ${{ inputs.namespace }}"
        echo "Port: ${{ inputs.port }}"
        echo "Target Port: ${{ inputs.target-port }}"

    - name: Set up doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ inputs.do-token }}

    - name: Save kubeconfig
      shell: bash
      run: doctl kubernetes cluster kubeconfig save ${{ inputs.cluster-name }}

    - name: Generate dynamic resource names
      id: resource-names
      shell: bash
      run: |
        SANITIZED_BRANCH=$(echo "${{ inputs.branch-name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
        
        if [[ "${{ inputs.project-type }}" == "server" ]]; then
          SERVICE_NAME="${SANITIZED_BRANCH}-server-svc"
          SELECTOR_APP="${SANITIZED_BRANCH}-server"
          SERVICE_FILE="devops-ci/k8s/preview/irai-yoga-v1-server/service.yaml"
          echo "üì¶ Project Type: Server"
        elif [[ "${{ inputs.project-type }}" == "admin" ]]; then
          SERVICE_NAME="${SANITIZED_BRANCH}-admin-svc"
          SELECTOR_APP="${SANITIZED_BRANCH}-admin"
          SERVICE_FILE="devops-ci/k8s/preview/irai-yoga-v1-admin/service.yaml"
          echo "üì¶ Project Type: Admin"
        else
          echo "‚ùå Unknown project type: ${{ inputs.project-type }}"
          echo "‚úÖ Supported types: server, admin"
          exit 1
        fi
        
        echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "selector_app=$SELECTOR_APP" >> $GITHUB_OUTPUT
        echo "service_file=$SERVICE_FILE" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Generated Resources:"
        echo "   Service Name: $SERVICE_NAME"
        echo "   Selector App: $SELECTOR_APP"
        echo "   Service File: $SERVICE_FILE"

    - name: Verify service template file exists
      shell: bash
      run: |
        SERVICE_FILE="${{ steps.resource-names.outputs.service_file }}"
        
        echo "üìÅ Checking service template file: $SERVICE_FILE"
        
        if [ ! -f "$SERVICE_FILE" ]; then
          echo "‚ùå Service template file not found: $SERVICE_FILE"
          echo "üìÇ Current directory structure:"
          find . -name "*.yaml" -o -name "*.yml" | head -20
          exit 1
        else
          echo "‚úÖ Service template file found: $SERVICE_FILE"
          echo "üìÑ File content preview:"
          head -20 "$SERVICE_FILE"
        fi

    - name: Update placeholders in service file
      shell: bash
      run: |
        SERVICE_FILE="${{ steps.resource-names.outputs.service_file }}"
        SERVICE_NAME="${{ steps.resource-names.outputs.service_name }}"
        SELECTOR_APP="${{ steps.resource-names.outputs.selector_app }}"
        PORT="${{ inputs.port }}"
        TARGET_PORT="${{ inputs.target-port }}"
        
        echo "üîÑ Updating placeholders in: $SERVICE_FILE"
        echo "   Service Name: $SERVICE_NAME"
        echo "   Selector App: $SELECTOR_APP"
        echo "   Port: $PORT"
        echo "   Target Port: $TARGET_PORT"
        
        # Create backup of original file
        cp "$SERVICE_FILE" "${SERVICE_FILE}.backup"
        
        # Update all placeholders with proper escaping and different delimiters
        sed -i "s|SERVICE_NAME_PLACEHOLDER|$SERVICE_NAME|g" "$SERVICE_FILE"
        sed -i "s|SELECTOR_APP_PLACEHOLDER|$SELECTOR_APP|g" "$SERVICE_FILE"
        sed -i "s|PORT_PLACEHOLDER|$PORT|g" "$SERVICE_FILE"
        # Use a different delimiter for target port to avoid issues
        sed -i "s|TARGET_PORT_PLACEHOLDER|$TARGET_PORT|g" "$SERVICE_FILE"
        
        echo "‚úÖ Updated service file:"
        echo "üìÑ Modified content preview:"
        cat "$SERVICE_FILE"

    - name: Debug placeholder replacement
      shell: bash
      run: |
        SERVICE_FILE="${{ steps.resource-names.outputs.service_file }}"
        echo "üîç Debugging placeholder replacement in: $SERVICE_FILE"
        echo "Current file content:"
        cat "$SERVICE_FILE"
        echo "---"
        echo "Looking for remaining placeholders:"
        grep -E "PLACEHOLDER|TARGET_|PORT_" "$SERVICE_FILE" || echo "No placeholders found"

    - name: Apply Service YAML
      shell: bash
      run: |
        SERVICE_FILE="${{ steps.resource-names.outputs.service_file }}"
        SERVICE_NAME="${{ steps.resource-names.outputs.service_name }}"
        NAMESPACE="${{ inputs.namespace }}"
        
        echo "üöÄ Applying service to namespace: $NAMESPACE"
        echo "   File: $SERVICE_FILE"
        echo "   Name: $SERVICE_NAME"
        
        # Show final YAML content
        echo "üìÑ Final YAML to be applied:"
        cat "$SERVICE_FILE"
        echo "---"
        
        # Validate the YAML syntax first
        kubectl apply --dry-run=client -f "$SERVICE_FILE" -n "$NAMESPACE"
        
        # Apply the service
        kubectl apply -f "$SERVICE_FILE" -n "$NAMESPACE"
        
        # Verify the service was created
        kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" --ignore-not-found
        
        echo "‚úÖ Service '$SERVICE_NAME' applied successfully for ${{ inputs.project-type }} project"
