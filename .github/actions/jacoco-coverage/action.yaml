name: 'JaCoCo Code Coverage'
description: 'Run JaCoCo code coverage analysis for Java projects'

inputs:
  build-tool:
    description: 'Build tool (maven or gradle)'
    required: false
    default: 'auto'
  min-line-coverage:
    description: 'Minimum line coverage percentage'
    required: true
    default: '70'
  min-branch-coverage:
    description: 'Minimum branch coverage percentage'
    required: true
    default: '60'
  skip-tests:
    description: 'Skip test execution'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      
    - name: Setup Java
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Debug inputs and repository
      shell: bash
      run: |
        echo "Build tool: '${{ inputs.build-tool }}'"
        echo "Skip tests: '${{ inputs.skip-tests }}'"
        echo "Min line coverage: '${{ inputs.min-line-coverage }}'"
        echo "Min branch coverage: '${{ inputs.min-branch-coverage }}'"
        echo "Repository contents:"
        ls -la
        echo "Build files:"
        ls -la pom.xml build.gradle build.gradle.kts 2>/dev/null || echo "No build files found"
        
    - name: Detect build tool
      id: detect-build-tool
      shell: bash
      run: |
        if [ "${{ inputs.build-tool }}" == "maven" ]; then
          echo "build_tool=maven" >> $GITHUB_OUTPUT
          echo "Using Maven (explicitly specified)"
        elif [ "${{ inputs.build-tool }}" == "gradle" ]; then
          echo "build_tool=gradle" >> $GITHUB_OUTPUT
          echo "Using Gradle (explicitly specified)"
        elif [ -f "pom.xml" ]; then
          echo "build_tool=maven" >> $GITHUB_OUTPUT
          echo "Detected Maven project (pom.xml found)"
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "build_tool=gradle" >> $GITHUB_OUTPUT
          echo "Detected Gradle project (build.gradle or build.gradle.kts found)"
        else
          echo "build_tool=maven" >> $GITHUB_OUTPUT
          echo "No build file detected, defaulting to Maven"
        fi
        echo "Final build tool: ${{ steps.detect-build-tool.outputs.build_tool }}"
        
    - name: Make gradlew executable
      if: steps.detect-build-tool.outputs.build_tool == 'gradle'
      shell: bash
      run: chmod +x ./gradlew
        
    - name: Run JaCoCo Code Coverage (Maven)
      if: steps.detect-build-tool.outputs.build_tool == 'maven' && inputs.skip-tests != 'true'
      shell: bash
      run: |
        echo "Running Maven tests with JaCoCo coverage..."
        mvn clean test jacoco:report -q
        echo "Maven JaCoCo report should be generated at target/site/jacoco/jacoco.xml"
        # Verify report was created
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ JaCoCo report generated successfully"
        else
          echo "❌ JaCoCo report was not generated"
          exit 1
        fi
        
    - name: Run JaCoCo Code Coverage (Gradle)
      if: steps.detect-build-tool.outputs.build_tool == 'gradle' && inputs.skip-tests != 'true'
      shell: bash
      run: |
        echo "Running Gradle tests with JaCoCo coverage..."
        ./gradlew clean test jacocoTestReport --console=plain
        
        echo "=== Debugging JaCoCo report locations ==="
        echo "Current directory: $(pwd)"
        echo "Listing build directory:"
        ls -la build/ || echo "No build directory"
        echo "Listing build/reports directory:"
        ls -la build/reports/ || echo "No reports directory"
        echo "Listing build/reports/jacoco directory:"
        ls -la build/reports/jacoco/ || echo "No jacoco directory"
        
        echo "Searching for all JaCoCo files:"
        find . -name "*jacoco*" -type f 2>/dev/null | head -20 || echo "No JaCoCo files found"
        find . -name "*.xml" -path "*/jacoco/*" -type f 2>/dev/null | head -20 || echo "No JaCoCo XML files found"
        
        echo "Checking specific paths:"
        check_paths=(
          "build/reports/jacoco/test/jacocoTestReport.xml"
          "build/reports/jacoco/test.xml"
          "build/reports/jacoco/jacocoTestReport.xml"
          "build/reports/jacoco/test/jacoco.xml"
          "build/jacoco/test.exec"
          "build/jacoco/test/jacocoTestReport.xml"
        )
        
        for path in "${check_paths[@]}"; do
          if [ -f "$path" ]; then
            echo "✅ FOUND: $path"
            echo "File size: $(wc -c < "$path") bytes"
          else
            echo "❌ NOT FOUND: $path"
          fi
        done
        
        # If we find any JaCoCo XML file, use it
        JACOCO_XML=$(find . -name "*.xml" -path "*/jacoco/*" -type f 2>/dev/null | head -1)
        if [ -n "$JACOCO_XML" ]; then
          echo "✅ Using JaCoCo report: $JACOCO_XML"
        else
          echo "❌ No JaCoCo XML report found"
          exit 1
        fi
        
    - name: Skip tests and generate empty JaCoCo report (Maven)
      if: steps.detect-build-tool.outputs.build_tool == 'maven' && inputs.skip-tests == 'true'
      shell: bash
      run: |
        echo "⚠️ Skipping tests and generating empty JaCoCo report for Maven"
        mkdir -p target/site/jacoco/
        cat > target/site/jacoco/jacoco.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd">
        <report name="JaCoCo Coverage Report">
          <sessioninfo id="localhost" start="0" dump="0"/>
          <counter type="INSTRUCTION" missed="0" covered="0"/>
          <counter type="BRANCH" missed="0" covered="0"/>
          <counter type="LINE" missed="0" covered="0"/>
          <counter type="COMPLEXITY" missed="0" covered="0"/>
          <counter type="METHOD" missed="0" covered="0"/>
          <counter type="CLASS" missed="0" covered="0"/>
        </report>
        EOF
        echo "Empty JaCoCo report generated for skipped tests"
        
    - name: Skip tests and generate empty JaCoCo report (Gradle)
      if: steps.detect-build-tool.outputs.build_tool == 'gradle' && inputs.skip-tests == 'true'
      shell: bash
      run: |
        echo "⚠️ Skipping tests and generating empty JaCoCo report for Gradle"
        mkdir -p build/reports/jacoco/test/
        cat > build/reports/jacoco/test/jacocoTestReport.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd">
        <report name="JaCoCo Coverage Report">
          <sessioninfo id="localhost" start="0" dump="0"/>
          <counter type="INSTRUCTION" missed="0" covered="0"/>
          <counter type="BRANCH" missed="0" covered="0"/>
          <counter type="LINE" missed="0" covered="0"/>
          <counter type="COMPLEXITY" missed="0" covered="0"/>
          <counter type="METHOD" missed="0" covered="0"/>
          <counter type="CLASS" missed="0" covered="0"/>
        </report>
        EOF
        echo "Empty JaCoCo report generated for skipped tests"
        
    - name: Check if JaCoCo report exists
      id: check-report
      shell: bash
      run: |
        echo "Searching for JaCoCo reports..."
        
        ACTUAL_BUILD_TOOL="${{ steps.detect-build-tool.outputs.build_tool }}"
        echo "Actual build tool: $ACTUAL_BUILD_TOOL"
        
        if [ "$ACTUAL_BUILD_TOOL" == "maven" ]; then
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "report_path=target/site/jacoco/jacoco.xml" >> $GITHUB_OUTPUT
            echo "✅ Found Maven JaCoCo report"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Maven JaCoCo report not found at target/site/jacoco/jacoco.xml"
          fi
        else
          # Find any JaCoCo XML report for Gradle
          JACOCO_REPORT=$(find . -name "*.xml" -path "*/jacoco/*" -type f 2>/dev/null | head -1)
          if [ -n "$JACOCO_REPORT" ] && [ -f "$JACOCO_REPORT" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "report_path=$JACOCO_REPORT" >> $GITHUB_OUTPUT
            echo "✅ Found Gradle JaCoCo report at: $JACOCO_REPORT"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "❌ No Gradle JaCoCo XML report found"
            echo "Available files in build directory:"
            find build/ -type f -name "*.xml" 2>/dev/null | head -20 || echo "No XML files in build directory"
          fi
        fi
        
    - name: Run JaCoCo analysis
      if: steps.check-report.outputs.report_exists == 'true'
      shell: bash
      run: |
        echo "=== JaCoCo Coverage Summary ==="
        
        REPORT_PATH="${{ steps.check-report.outputs.report_path }}"
        echo "Analyzing report: $REPORT_PATH"
        
        # Extract coverage data from XML
        LINE_MISSED=$(grep '<counter type="LINE"' "$REPORT_PATH" | head -1 | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
        LINE_COVERED=$(grep '<counter type="LINE"' "$REPORT_PATH" | head -1 | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
        BRANCH_MISSED=$(grep '<counter type="BRANCH"' "$REPORT_PATH" | head -1 | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
        BRANCH_COVERED=$(grep '<counter type="BRANCH"' "$REPORT_PATH" | head -1 | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
        
        # Set defaults if values are empty
        LINE_MISSED=${LINE_MISSED:-0}
        LINE_COVERED=${LINE_COVERED:-0}
        BRANCH_MISSED=${BRANCH_MISSED:-0}
        BRANCH_COVERED=${BRANCH_COVERED:-0}
        
        # Calculate percentages
        LINE_TOTAL=$((LINE_MISSED + LINE_COVERED))
        BRANCH_TOTAL=$((BRANCH_MISSED + BRANCH_COVERED))
        
        if [ $LINE_TOTAL -gt 0 ]; then
          LINE_PERCENT=$(echo "scale=2; $LINE_COVERED * 100 / $LINE_TOTAL" | bc)
        else
          LINE_PERCENT=0
        fi
        
        if [ $BRANCH_TOTAL -gt 0 ]; then
          BRANCH_PERCENT=$(echo "scale=2; $BRANCH_COVERED * 100 / $BRANCH_TOTAL" | bc)
        else
          BRANCH_PERCENT=0
        fi
        
        echo "Line Coverage: $LINE_PERCENT% ($LINE_COVERED/$LINE_TOTAL)"
        echo "Branch Coverage: $BRANCH_PERCENT% ($BRANCH_COVERED/$BRANCH_TOTAL)"
        
        # Check against minimum thresholds
        MIN_LINE=${{ inputs.min-line-coverage }}
        MIN_BRANCH=${{ inputs.min-branch-coverage }}
        
        if (( $(echo "$LINE_PERCENT < $MIN_LINE" | bc -l) )); then
          echo "❌ Line coverage ($LINE_PERCENT%) is below minimum required ($MIN_LINE%)"
          exit 1
        else
          echo "✅ Line coverage meets minimum requirement ($LINE_PERCENT% >= $MIN_LINE%)"
        fi
        
        if (( $(echo "$BRANCH_PERCENT < $MIN_BRANCH" | bc -l) )); then
          echo "❌ Branch coverage ($BRANCH_PERCENT%) is below minimum required ($MIN_BRANCH%)"
          exit 1
        else
          echo "✅ Branch coverage meets minimum requirement ($BRANCH_PERCENT% >= $MIN_BRANCH%)"
        fi
        
    - name: Warn if no JaCoCo report found
      if: steps.check-report.outputs.report_exists == 'false'
      shell: bash
      run: |
        echo "❌ No JaCoCo report found."
        echo "Build tool: ${{ steps.detect-build-tool.outputs.build_tool }}"
        echo "Skip tests: '${{ inputs.skip-tests }}'"
        echo "Please check:"
        echo "1. Tests executed properly"
        echo "2. JaCoCo plugin is configured"
        echo "3. Build completed successfully"
        exit 1
        
    - name: Upload JaCoCo Report
      if: always()
      uses: cloudops-one/upload-artifact@v4
      with:
        name: jacoco-coverage-report
        path: |
          ${{ steps.detect-build-tool.outputs.build_tool == 'maven' && 'target/site/jacoco/' || 'build/reports/jacoco/' }}
        retention-days: 7
