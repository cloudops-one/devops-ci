name: 'JaCoCo Code Coverage'
description: 'Run JaCoCo code coverage analysis for Java projects'

inputs:
  build-tool:
    description: 'Build tool (maven or gradle)'
    required: true
  min-line-coverage:
    description: 'Minimum line coverage percentage'
    required: true
    default: '85'
  min-branch-coverage:
    description: 'Minimum branch coverage percentage'
    required: true
    default: '60'
  skip-tests:
    description: 'Skip test execution'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      
    - name: Setup Java
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run JaCoCo Code Coverage (Maven)
      if: inputs.build-tool == 'maven' && inputs.skip-tests != 'true'
      shell: bash
      run: |
        # Use clean verify instead of test to ensure proper lifecycle
        mvn clean verify jacoco:report -q
        echo "JaCoCo report should be generated at target/site/jacoco/jacoco.xml"
        # List files to debug
        echo "Checking report location:"
        find . -name "jacoco.xml" -type f 2>/dev/null || echo "No jacoco.xml found"
        ls -la target/site/jacoco/ 2>/dev/null || echo "jacoco directory not found"
        
    - name: Run JaCoCo Code Coverage (Gradle)
      if: inputs.build-tool == 'gradle' && inputs.skip-tests != 'true'
      shell: bash
      run: |
        ./gradlew clean test jacocoTestReport --console=plain
        echo "JaCoCo report generated at build/reports/jacoco/test/jacocoTestReport.xml"
        # List files to debug
        find . -name "jacoco*.xml" -type f 2>/dev/null || echo "No jacoco XML reports found"
        
    - name: Skip tests and generate empty JaCoCo report (Maven)
      if: inputs.build-tool == 'maven' && inputs.skip-tests == 'true'
      shell: bash
      run: |
        echo "Skipping tests and generating empty JaCoCo report for Maven"
        # Create minimal JaCoCo report structure
        mkdir -p target/site/jacoco/
        cat > target/site/jacoco/jacoco.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd">
        <report name="JaCoCo Coverage Report">
          <sessioninfo id="localhost" start="0" dump="0"/>
          <package name="com/example">
            <class name="com/example/ExampleClass" sourcefilename="ExampleClass.java">
              <method name="<init>" desc="()V" line="5"/>
              <counter type="INSTRUCTION" missed="0" covered="0"/>
              <counter type="BRANCH" missed="0" covered="0"/>
              <counter type="LINE" missed="0" covered="0"/>
              <counter type="COMPLEXITY" missed="0" covered="0"/>
              <counter type="METHOD" missed="0" covered="0"/>
              <counter type="CLASS" missed="0" covered="0"/>
            </class>
            <sourcefile name="ExampleClass.java">
              <line nr="5" mi="0" ci="0" mb="0" cb="0"/>
              <counter type="INSTRUCTION" missed="0" covered="0"/>
              <counter type="BRANCH" missed="0" covered="0"/>
              <counter type="LINE" missed="0" covered="0"/>
              <counter type="COMPLEXITY" missed="0" covered="0"/>
              <counter type="METHOD" missed="0" covered="0"/>
            </sourcefile>
            <counter type="INSTRUCTION" missed="0" covered="0"/>
            <counter type="BRANCH" missed="0" covered="0"/>
            <counter type="LINE" missed="0" covered="0"/>
            <counter type="COMPLEXITY" missed="0" covered="0"/>
            <counter type="METHOD" missed="0" covered="0"/>
            <counter type="CLASS" missed="0" covered="0"/>
          </package>
          <counter type="INSTRUCTION" missed="0" covered="0"/>
          <counter type="BRANCH" missed="0" covered="0"/>
          <counter type="LINE" missed="0" covered="0"/>
          <counter type="COMPLEXITY" missed="0" covered="0"/>
          <counter type="METHOD" missed="0" covered="0"/>
          <counter type="CLASS" missed="0" covered="0"/>
        </report>
        EOF
        echo "Empty JaCoCo report generated for skipped tests"
        
    - name: Skip tests and generate empty JaCoCo report (Gradle)
      if: inputs.build-tool == 'gradle' && inputs.skip-tests == 'true'
      shell: bash
      run: |
        echo "Skipping tests and generating empty JaCoCo report for Gradle"
        # Create minimal JaCoCo report structure
        mkdir -p build/reports/jacoco/test/
        cat > build/reports/jacoco/test/jacocoTestReport.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd">
        <report name="JaCoCo Coverage Report">
          <sessioninfo id="localhost" start="0" dump="0"/>
          <package name="com/example">
            <class name="com/example/ExampleClass" sourcefilename="ExampleClass.java">
              <method name="<init>" desc="()V" line="5"/>
              <counter type="INSTRUCTION" missed="0" covered="0"/>
              <counter type="BRANCH" missed="0" covered="0"/>
              <counter type="LINE" missed="0" covered="0"/>
              <counter type="COMPLEXITY" missed="0" covered="0"/>
              <counter type="METHOD" missed="0" covered="0"/>
              <counter type="CLASS" missed="0" covered="0"/>
            </class>
            <sourcefile name="ExampleClass.java">
              <line nr="5" mi="0" ci="0" mb="0" cb="0"/>
              <counter type="INSTRUCTION" missed="0" covered="0"/>
              <counter type="BRANCH" missed="0" covered="0"/>
              <counter type="LINE" missed="0" covered="0"/>
              <counter type="COMPLEXITY" missed="0" covered="0"/>
              <counter type="METHOD" missed="0" covered="0"/>
            </sourcefile>
            <counter type="INSTRUCTION" missed="0" covered="0"/>
            <counter type="BRANCH" missed="0" covered="0"/>
            <counter type="LINE" missed="0" covered="0"/>
            <counter type="COMPLEXITY" missed="0" covered="0"/>
            <counter type="METHOD" missed="0" covered="0"/>
            <counter type="CLASS" missed="0" covered="0"/>
          </package>
          <counter type="INSTRUCTION" missed="0" covered="0"/>
          <counter type="BRANCH" missed="0" covered="0"/>
          <counter type="LINE" missed="0" covered="0"/>
          <counter type="COMPLEXITY" missed="0" covered="0"/>
          <counter type="METHOD" missed="0" covered="0"/>
          <counter type="CLASS" missed="0" covered="0"/>
        </report>
        EOF
        echo "Empty JaCoCo report generated for skipped tests"
        
    - name: Check if JaCoCo report exists
      id: check-report
      shell: bash
      run: |
        echo "Searching for JaCoCo reports..."
        find . -name "jacoco*.xml" -type f | head -10
        
        if [ "${{ inputs.build-tool }}" == "maven" ]; then
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "Found Maven JaCoCo report"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "Maven JaCoCo report not found at target/site/jacoco/jacoco.xml"
          fi
        else
          if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "Found Gradle JaCoCo report"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "Gradle JaCoCo report not found at build/reports/jacoco/test/jacocoTestReport.xml"
          fi
        fi
        
    - name: Run JaCoCo analysis if report exists
      if: steps.check-report.outputs.report_exists == 'true'
      shell: bash
      run: |
        echo "=== JaCoCo Coverage Summary ==="
        
        if [ "${{ inputs.build-tool }}" == "maven" ]; then
          REPORT_PATH="target/site/jacoco/jacoco.xml"
        else
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
        fi
        
        # Extract coverage percentages from XML using more robust method
        if [ -f "$REPORT_PATH" ]; then
          echo "Analyzing report: $REPORT_PATH"
          
          # Extract counter values for line and branch coverage
          LINE_MISSED=$(grep '<counter type="LINE"' "$REPORT_PATH" | head -1 | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
          LINE_COVERED=$(grep '<counter type="LINE"' "$REPORT_PATH" | head -1 | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
          BRANCH_MISSED=$(grep '<counter type="BRANCH"' "$REPORT_PATH" | head -1 | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
          BRANCH_COVERED=$(grep '<counter type="BRANCH"' "$REPORT_PATH" | head -1 | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
          
          # Calculate percentages
          LINE_TOTAL=$((LINE_MISSED + LINE_COVERED))
          BRANCH_TOTAL=$((BRANCH_MISSED + BRANCH_COVERED))
          
          if [ $LINE_TOTAL -gt 0 ]; then
            LINE_PERCENT=$(echo "scale=2; $LINE_COVERED * 100 / $LINE_TOTAL" | bc)
          else
            LINE_PERCENT=0
          fi
          
          if [ $BRANCH_TOTAL -gt 0 ]; then
            BRANCH_PERCENT=$(echo "scale=2; $BRANCH_COVERED * 100 / $BRANCH_TOTAL" | bc)
          else
            BRANCH_PERCENT=0
          fi
          
          echo "Line Coverage: $LINE_PERCENT% ($LINE_COVERED/$LINE_TOTAL)"
          echo "Branch Coverage: $BRANCH_PERCENT% ($BRANCH_COVERED/$BRANCH_TOTAL)"
          
          # Check if coverage meets minimum thresholds
          MIN_LINE=${{ inputs.min-line-coverage }}
          MIN_BRANCH=${{ inputs.min-branch-coverage }}
          
          if (( $(echo "$LINE_PERCENT < $MIN_LINE" | bc -l) )); then
            echo "❌ Line coverage ($LINE_PERCENT%) is below minimum required ($MIN_LINE%)"
            exit 1
          else
            echo "✅ Line coverage meets minimum requirement ($LINE_PERCENT% >= $MIN_LINE%)"
          fi
          
          if (( $(echo "$BRANCH_PERCENT < $MIN_BRANCH" | bc -l) )); then
            echo "❌ Branch coverage ($BRANCH_PERCENT%) is below minimum required ($MIN_BRANCH%)"
            exit 1
          else
            echo "✅ Branch coverage meets minimum requirement ($BRANCH_PERCENT% >= $MIN_BRANCH%)"
          fi
        else
          echo "Report file not found: $REPORT_PATH"
          exit 1
        fi
        
    - name: Warn if no JaCoCo report found
      if: steps.check-report.outputs.report_exists == 'false'
      shell: bash
      run: |
        echo "⚠️  No JaCoCo report found."
        echo "Please check if tests were executed properly or if skip-tests was set to true."
        echo "Build tool: ${{ inputs.build-tool }}"
        echo "Skip tests: ${{ inputs.skip-tests }}"
        
    - name: Upload JaCoCo Report
      if: always()
      uses: cloudops-one/upload-artifact@v4
      with:
        name: jacoco-coverage-report
        path: |
          ${{ inputs.build-tool == 'maven' && 'target/site/jacoco/' || 'build/reports/jacoco/' }}
        retention-days: 7
