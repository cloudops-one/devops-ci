name: 'Test and Coverage'
description: 'Runs tests with coverage and checks thresholds'

inputs:
  node-version:
    description: 'Node.js version'
    required: true
    default: '20'
  threshold-statements:
    description: 'Statements coverage threshold'
    required: false
    default: '0'
  threshold-branches:
    description: 'Branches coverage threshold'
    required: false
    default: '0'
  threshold-functions:
    description: 'Functions coverage threshold'
    required: false
    default: '0'
  threshold-lines:
    description: 'Lines coverage threshold'
    required: false
    default: '0'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js ${{ inputs.node-version }}
      uses: cloudops-one/setup-node@v1
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies
      shell: bash
      run: npm install

    - name: Check if test files exist
      shell: bash
      run: |
        # Check for common test file patterns
        if [ -d "tests" ] || [ -d "__tests__" ] || [ -d "test" ] || \
           find . -name "*.test.*" -o -name "*.spec.*" -o -name "test-*.js" | grep -q .; then
          echo "✅ Test files found, running tests..."
          HAS_TESTS=true
        else
          echo "⚠️ No test files found. Skipping test execution."
          HAS_TESTS=false
        fi
        echo "HAS_TESTS=$HAS_TESTS" >> $GITHUB_ENV

    - name: Run tests with coverage (if tests exist)
      shell: bash
      if: env.HAS_TESTS == 'true'
      run: |
        npx jest --coverage \
          --coverageReporters=text,json,lcov,cobertura \
          --coverageDirectory=./coverage \
          --collectCoverageFrom="src/**/*.{js,jsx,ts,tsx}" \
          --passWithNoTests

    - name: Skip tests (if no tests exist)
      shell: bash
      if: env.HAS_TESTS == 'false'
      run: |
        echo "📝 Creating empty coverage report since no tests were found"
        mkdir -p coverage
        echo '{"total": {"statements": {"pct": 0}, "branches": {"pct": 0}, "functions": {"pct": 0}, "lines": {"pct": 0}}}' > coverage/coverage-summary.json

    - name: Check coverage thresholds
      shell: bash
      env:
        THRESHOLD_STATEMENTS: ${{ inputs.threshold-statements }}
        THRESHOLD_BRANCHES: ${{ inputs.threshold-branches }}
        THRESHOLD_FUNCTIONS: ${{ inputs.threshold-functions }}
        THRESHOLD_LINES: ${{ inputs.threshold-lines }}
      run: |
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "📊 Checking coverage thresholds..."
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const thresholds = {
              statements: process.env.THRESHOLD_STATEMENTS,
              branches: process.env.THRESHOLD_BRANCHES,
              functions: process.env.THRESHOLD_FUNCTIONS,
              lines: process.env.THRESHOLD_LINES
            };
            
            let failed = false;
            Object.keys(thresholds).forEach(type => {
              const actual = coverage.total[type]?.pct || 0;
              const required = parseFloat(thresholds[type]);
              if (actual < required) {
                console.error('❌ ' + type.charAt(0).toUpperCase() + type.slice(1) + 
                             ' coverage too low: ' + actual + '% (required: ' + required + '%)');
                failed = true;
              } else {
                console.log('✅ ' + type.charAt(0).toUpperCase() + type.slice(1) + 
                           ' coverage: ' + actual + '% (required: ' + required + '%)');
              }
            });
            
            if (failed) {
              console.log('\n📊 Full coverage summary:');
              console.log(JSON.stringify(coverage.total, null, 2));
              process.exit(1);
            }
            console.log('🎉 All coverage thresholds met!');
          "
        else
          echo "❌ Coverage report not found"
          exit 1
        fi

    - name: Display coverage summary
      shell: bash
      env:
        THRESHOLD_STATEMENTS: ${{ inputs.threshold-statements }}
        THRESHOLD_BRANCHES: ${{ inputs.threshold-branches }}
        THRESHOLD_FUNCTIONS: ${{ inputs.threshold-functions }}
        THRESHOLD_LINES: ${{ inputs.threshold-lines }}
      run: |
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "📊 Coverage Report Summary:"
          echo "=========================="
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            console.log('Statements:', coverage.total.statements.pct + '%');
            console.log('Branches:', coverage.total.branches.pct + '%');
            console.log('Functions:', coverage.total.functions.pct + '%');
            console.log('Lines:', coverage.total.lines.pct + '%');
          "
          echo "📈 Thresholds:"
          echo "  Statements: $THRESHOLD_STATEMENTS%"
          echo "  Branches: $THRESHOLD_BRANCHES%"
          echo "  Functions: $THRESHOLD_FUNCTIONS%"
          echo "  Lines: $THRESHOLD_LINES%"
        fi
