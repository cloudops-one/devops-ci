name: 'Security Scan'
description: 'Runs security scans with SonarQube, Trivy, Snyk, Spotless, and JaCoCo'

inputs:
  image-name:
    description: 'Docker image name to scan with Trivy and Snyk'
    required: true
  snyk-token:
    description: 'Snyk API token'
    required: true
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host:
    description: 'SonarQube host URL'
    required: true

runs:
  using: 'composite'
  steps:
    # Install required tools
    - name: Install security tools
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        
        # Install Snyk
        npm install -g snyk
      shell: bash

    # Authenticate Snyk
    - name: Authenticate Snyk
      run: |
        echo "Authenticating Snyk..."
        snyk auth ${{ inputs.snyk-token }}
        echo "‚úÖ Snyk authenticated successfully"
      shell: bash

    # Snyk Container Scan
    - name: Snyk Container Scan
      run: |
        echo "Running Snyk container scan..."
        snyk container test ${{ inputs.image-name }} --severity-threshold=high
        
        # Monitor the image in Snyk dashboard
        snyk container monitor ${{ inputs.image-name }}
        
        echo "‚úÖ Snyk container scan completed"
      shell: bash

    # Trivy Container Scan
    - name: Trivy Container Scan
      run: |
        echo "Scanning Docker image for vulnerabilities with Trivy..."
        trivy image --severity HIGH,CRITICAL ${{ inputs.image-name }}
        
        # Fail pipeline if critical vulnerabilities found
        if trivy image --severity CRITICAL ${{ inputs.image-name }} | grep -q "CRITICAL"; then
          echo "‚ùå CRITICAL vulnerabilities found in container image!"
          exit 1
        fi
        
        # Also fail on high severity vulnerabilities
        if trivy image --severity HIGH ${{ inputs.image-name }} | grep -q "HIGH"; then
          echo "‚ùå HIGH severity vulnerabilities found in container image!"
          exit 1
        fi
        
        echo "‚úÖ No critical vulnerabilities found in container image"
      shell: bash

    # SonarQube Scan
    - name: SonarQube Scan
      run: |
        echo "Running SonarQube analysis..."
        # Install SonarScanner if not already available
        if ! command -v sonar-scanner &> /dev/null; then
          echo "Installing SonarScanner..."
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
          echo 'export PATH=$PATH:/opt/sonar-scanner/bin' >> ~/.bashrc
          source ~/.bashrc
        fi
        
        # Run SonarQube analysis
        sonar-scanner \
          -Dsonar.projectKey=my-project \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ inputs.sonar-host }} \
          -Dsonar.login=${{ inputs.sonar-token }}
        
        echo "‚úÖ SonarQube analysis completed"
      shell: bash

    # Spotless Code Formatting Check
    - name: Code Formatting Check
      run: |
        echo "Checking code formatting..."
        # Check JavaScript/TypeScript formatting with prettier
        if [ -f "package.json" ]; then
          npx prettier --check . || {
            echo "‚ùå Code formatting issues found. Run 'npx prettier --write .' to fix"
            exit 1
          }
          
          echo "Running ESLint..."
          npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0 || {
            echo "‚ùå ESLint issues found"
            exit 1
          }
        else
          echo "No package.json found, skipping code formatting checks"
        fi
        
        echo "‚úÖ Code formatting check passed"
      shell: bash

    # JaCoCo Code Coverage (for Java projects - optional)
    - name: Code Coverage Check
      run: |
        # Only run if it's a Java project
        if [ -f "pom.xml" ]; then
          echo "Java project detected, running JaCoCo..."
          mvn test jacoco:report
          mvn jacoco:check
        elif [ -f "build.gradle" ]; then
          echo "Gradle project detected, running JaCoCo..."
          ./gradlew test jacocoTestReport
          ./gradlew jacocoTestCoverageVerification
        else
          echo "No Java project detected, skipping JaCoCo"
        fi
      shell: bash

    # Final security status check
    - name: Security Scan Summary
      run: |
        echo " "
        echo "üîí SECURITY SCAN SUMMARY"
        echo "========================"
        echo "‚úÖ SonarQube: Code quality and security analysis completed"
        echo "‚úÖ Trivy: Container vulnerabilities checked"
        echo "‚úÖ Snyk: Container security analysis completed"
        echo "‚úÖ Code formatting: Verified"
        echo "‚úÖ Code coverage: Verified (if Java project)"
        echo " "
        echo "All security checks passed! üéâ"
      shell: bash
