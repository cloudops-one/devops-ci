name: 'SonarQube Scan'
description: 'Centralized SonarQube scanning for frontend (JS/TS) and backend (Java) projects'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube server URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Project version (e.g., build number or tag)'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  sources-path:
    description: 'Path to source code'
    default: 'src'
  coverage-path:
    description: 'Coverage report path (auto-detected if empty)'
    default: ''
  java-version:
    description: 'Java version (for backend projects)'
    default: '17'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect project type
      id: detect
      shell: bash
      run: |
        if [ -f "pom.xml" ]; then
          echo "language=java" >> $GITHUB_OUTPUT
          echo "build-tool=maven" >> $GITHUB_OUTPUT
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "language=java" >> $GITHUB_OUTPUT
          echo "build-tool=gradle" >> $GITHUB_OUTPUT
        elif [ -f "package.json" ]; then
          echo "language=javascript" >> $GITHUB_OUTPUT
          echo "build-tool=npm" >> $GITHUB_OUTPUT
        else
          echo "language=unknown" >> $GITHUB_OUTPUT
          echo "build-tool=none" >> $GITHUB_OUTPUT
        fi

    - name: Set up environment
      uses: cloudops-one/setup-java@v4
      if: steps.detect.outputs.language == 'java'
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'

    - name: Install SonarScanner
      shell: bash
      run: npm install -g sonar-scanner

    - name: Run SonarQube Analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "Running SonarQube analysis for ${{ steps.detect.outputs.language }} project..."

        PARAMS=(
          "-Dsonar.projectKey=${{ inputs.project-key }}"
          "-Dsonar.projectName=${{ inputs.project-name }}"
          "-Dsonar.projectVersion=${{ inputs.docker-tag }}"
          "-Dsonar.branch.name=${{ inputs.branch-name }}"
          "-Dsonar.sources=${{ inputs.sources-path }}"
          "-Dsonar.host.url=${SONAR_HOST_URL}"
          "-Dsonar.login=${SONAR_TOKEN}"
          "-Dsonar.qualitygate.wait=true"
          "-Dsonar.scm.provider=git"
        )

        # Add language-specific params
        case "${{ steps.detect.outputs.language }}" in
          java)
            PARAMS+=("-Dsonar.language=java")
            PARAMS+=("-Dsonar.java.source=${{ inputs.java-version }}")
            PARAMS+=("-Dsonar.java.binaries=build/classes")
            PARAMS+=("-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/target/**,**/*.d.ts")
            PARAMS+=("-Dsonar.tests=${{ inputs.sources-path }}")
            PARAMS+=("-Dsonar.test.inclusions=**/*Test.java,**/*Spec.java")

            COVERAGE_PATH="${{ inputs.coverage-path }}"
            if [ -z "$COVERAGE_PATH" ]; then
              if [ "${{ steps.detect.outputs.build-tool }}" = "maven" ]; then
                COVERAGE_PATH="target/site/jacoco/jacoco.xml"
              else
                COVERAGE_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
              fi
            fi
            [ -f "$COVERAGE_PATH" ] && PARAMS+=("-Dsonar.coverage.jacoco.xmlReportPaths=$COVERAGE_PATH")
            ;;
          
          javascript|typescript)
            PARAMS+=("-Dsonar.language=js")
            PARAMS+=("-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/*.d.ts")
            PARAMS+=("-Dsonar.tests=${{ inputs.sources-path }}")
            PARAMS+=("-Dsonar.test.inclusions=**/*.test.js,**/*.test.ts,**/*.spec.js,**/*.spec.ts")

            COVERAGE_PATH="${{ inputs.coverage-path }}"
            [ -z "$COVERAGE_PATH" ] && COVERAGE_PATH="coverage/lcov.info"
            [ -f "$COVERAGE_PATH" ] && PARAMS+=("-Dsonar.javascript.lcov.reportPaths=$COVERAGE_PATH" "-Dsonar.typescript.lcov.reportPaths=$COVERAGE_PATH")
            ;;
        esac

        echo "SonarQube parameters:"
        printf '%s\n' "${PARAMS[@]}"

        sonar-scanner "${PARAMS[@]}"

    - name: SonarQube Analysis Summary
      shell: bash
      run: |
        echo "=== SonarQube Scan Summary ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Language: ${{ steps.detect.outputs.language }}"
        echo "Build Tool: ${{ steps.detect.outputs.build-tool }}"
        echo "Sources Path: ${{ inputs.sources-path }}"
        echo "Coverage Path: ${{ inputs.coverage-path || 'auto-detected' }}"
        echo "Status: âœ… Completed (check SonarQube dashboard for details)"
