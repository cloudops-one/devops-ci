name: 'SonarQube Scan'
description: 'Centralized SonarQube code quality scanning'

inputs:
  sonar-token:
    description: 'SonarQube token'
    required: true
  sonar-host-url:
    description: 'SonarQube host URL'
    required: true
  project-key:
    description: 'SonarQube project key'
    required: true
  project-name:
    description: 'SonarQube project name'
    required: true
  docker-tag:
    description: 'Docker tag for project version'
    required: true
  branch-name:
    description: 'Git branch name'
    required: true
  sources-path:
    description: 'Path to source code'
    default: 'src'
    required: false
  coverage-path:
    description: 'Path to coverage reports'
    default: 'coverage/lcov.info'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: cloudops-one/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK for SonarScanner
      uses: cloudops-one/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install SonarScanner
      shell: bash
      run: npm install -g sonar-scanner

    - name: Run SonarQube Analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
      run: |
        echo "Running SonarQube analysis..."
        
        # Build parameters array
        PARAMS=(
          "-Dsonar.projectKey=${{ inputs.project-key }}"
          "-Dsonar.projectName=${{ inputs.project-name }}"
          "-Dsonar.projectVersion=${{ inputs.docker-tag }}"
          "-Dsonar.sources=${{ inputs.sources-path }}"
          "-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/*.d.ts"
          "-Dsonar.tests=${{ inputs.sources-path }}"
          "-Dsonar.test.inclusions=**/*.test.js,**/*.test.ts,**/*.spec.js,**/*.spec.ts"
          "-Dsonar.qualitygate.wait=true"
          "-Dsonar.branch.name=${{ inputs.branch-name }}"
          "-Dsonar.branch.target=main"
        )
        
        # Add coverage path if the file exists
        if [ -f "${{ inputs.coverage-path }}" ]; then
          PARAMS+=("-Dsonar.javascript.lcov.reportPaths=${{ inputs.coverage-path }}")
          PARAMS+=("-Dsonar.typescript.lcov.reportPaths=${{ inputs.coverage-path }}")
          echo "✓ Including coverage analysis"
        else
          echo "ℹ Skipping coverage analysis (coverage file not found)"
        fi
        
        echo "SonarQube parameters:"
        for param in "${PARAMS[@]}"; do
          echo "  $param"
        done
        
        # Run SonarScanner
        sonar-scanner "${PARAMS[@]}"
        
        echo "✓ SonarQube analysis completed successfully!"

    - name: SonarQube Analysis Summary
      shell: bash
      run: |
        echo "=== SonarQube Scan Summary ==="
        echo "Project: ${{ inputs.project-name }}"
        echo "Key: ${{ inputs.project-key }}"
        echo "Version: ${{ inputs.docker-tag }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "=============================="
