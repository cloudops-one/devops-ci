name: Cleanup Preview Deployments
on:
  schedule:
    - cron: '*/2 * * * *'  # Run every 2 minutes for testing
  delete:
    branches:
      - '**'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  cleanup-old-deployments:
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'delete' && github.event.ref_type == 'branch' && 
       (contains(github.event.ref, 'feat/') || contains(github.event.ref, 'fix/') || 
        contains(github.event.ref, 'chore/') || contains(github.event.ref, 'test/') ||
        contains(github.event.ref, 'docs/') || contains(github.event.ref, 'refactor/') ||
        contains(github.event.ref, 'ci/') || contains(github.event.ref, 'style/') ||
        contains(github.event.ref, 'perf/') || contains(github.event.ref, 'build/')))
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow trigger
        run: |
          echo "🔍 Workflow triggered by: ${{ github.event_name }}"
          echo "📅 Current time: $(date)"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and validate branch name
        id: extract-branch
        run: |
          BRANCH_NAME="${{ github.event.ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          # Validate it's a preview branch
          PREVIEW_BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/"
          
          if [[ "$BRANCH_NAME" =~ $PREVIEW_BRANCH_REGEX ]]; then
            echo "branch_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
            echo "is_preview_branch=true" >> $GITHUB_OUTPUT
            echo "✅ Valid preview branch: $BRANCH_NAME -> $SANITIZED_BRANCH"
          else
            echo "is_preview_branch=false" >> $GITHUB_OUTPUT
            echo "⏩ Skipping non-preview branch: $BRANCH_NAME"
          fi

      - name: Set up kubectl
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Save kubeconfig
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          doctl kubernetes cluster kubeconfig save k8s
          echo "✅ Kubeconfig saved"

      - name: Test kubectl access
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          echo "🔧 Testing kubectl access..."
          kubectl cluster-info
          kubectl get nodes
          echo "✅ kubectl is working"

      - name: Install AWS CLI
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS credentials
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          aws configure set aws_access_key_id ${{ secrets.ROUTE53_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.ROUTE53_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.ROUTE53_REGION }}
          echo "✅ AWS credentials configured"

      - name: Cleanup old preview deployments
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        env:
          NAMESPACE: "irai-yoga-v1-preview"
          HOSTED_ZONE_ID: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
        run: |
          set -e
          echo "🧹 Starting cleanup of preview deployments in namespace: $NAMESPACE"
          echo "⏰ Checking deployments older than 2 minutes..."

          # Check if namespace exists
          if ! kubectl get namespace $NAMESPACE &> /dev/null; then
            echo "ℹ️ Namespace $NAMESPACE does not exist"
            exit 0
          fi

          # Get Load Balancer IP
          LB_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -z "$LB_IP" ]; then
            LB_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          fi
          echo "🌐 Load Balancer IP: $LB_IP"

          # Get all deployments
          DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')
          echo "🔍 Found deployments: $DEPLOYMENTS"

          if [ -z "$DEPLOYMENTS" ]; then
            echo "ℹ️ No deployments found"
            exit 0
          fi

          for DEPLOYMENT in $DEPLOYMENTS; do
            # Only process preview deployments
            if [[ "$DEPLOYMENT" =~ -deployment$ ]]; then
              # Get deployment age
              CREATION_TIME=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o jsonpath='{.metadata.creationTimestamp}')
              
              if [ -n "$CREATION_TIME" ]; then
                CREATION_EPOCH=$(date -d "$CREATION_TIME" +%s)
                CURRENT_EPOCH=$(date +%s)
                AGE_SECONDS=$((CURRENT_EPOCH - CREATION_EPOCH))
                AGE_MINUTES=$((AGE_SECONDS / 60))
                
                echo "📊 $DEPLOYMENT - Age: $AGE_MINUTES minutes"
                
                # Delete if older than 2 minutes
                if [ $AGE_MINUTES -ge 2 ]; then
                  echo "🗑️ Deleting $DEPLOYMENT (older than 2 minutes)"
                  
                  # Extract base name
                  BASE_NAME=$(echo "$DEPLOYMENT" | sed 's/-deployment$//')
                  
                  # Delete deployment
                  kubectl delete deployment $DEPLOYMENT -n $NAMESPACE --ignore-not-found=true
                  
                  # Delete related resources
                  kubectl delete service $BASE_NAME-svc -n $NAMESPACE --ignore-not-found=true
                  kubectl delete service $BASE_NAME-service -n $NAMESPACE --ignore-not-found=true
                  kubectl delete ingress $BASE_NAME-ingress -n $NAMESPACE --ignore-not-found=true
                  kubectl delete certificate $BASE_NAME-tls -n $NAMESPACE --ignore-not-found=true
                  kubectl delete secret $BASE_NAME-tls -n $NAMESPACE --ignore-not-found=true
                  
                  # Cleanup DNS if AWS credentials are available
                  if [ -n "$LB_IP" ] && [ "$LB_IP" != "unknown" ]; then
                    SERVER_DOMAIN="$BASE_NAME.server.irai.yoga"
                    ADMIN_DOMAIN="$BASE_NAME.portal.irai.yoga"
                    
                    echo "🌐 Checking DNS records for: $SERVER_DOMAIN, $ADMIN_DOMAIN"
                    
                    # Delete DNS records (simplified)
                    for DOMAIN in $SERVER_DOMAIN $ADMIN_DOMAIN; do
                      if aws route53 list-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --query "ResourceRecordSets[?Name=='$DOMAIN.']" --output text | grep -q "$DOMAIN"; then
                        echo "🗑️ Deleting DNS record: $DOMAIN"
                        cat > delete-record.json << EOF
{
  "Changes": [{
    "Action": "DELETE",
    "ResourceRecordSet": {
      "Name": "$DOMAIN.",
      "Type": "A",
      "TTL": 300,
      "ResourceRecords": [{"Value": "$LB_IP"}]
    }
  }]
}
EOF
                        aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file://delete-record.json
                        rm -f delete-record.json
                      fi
                    done
                  fi
                  
                  echo "✅ Cleaned up $DEPLOYMENT"
                else
                  echo "⏳ Keeping $DEPLOYMENT (only $AGE_MINUTES minutes old)"
                fi
              fi
            else
              echo "ℹ️ Skipping non-preview deployment: $DEPLOYMENT"
            fi
          done

          echo "🔍 Final state:"
          kubectl get all -n $NAMESPACE
          echo "✅ Cleanup completed"

      - name: Skip non-preview branch
        if: github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'false'
        run: |
          echo "⏩ Skipping cleanup for non-preview branch: ${{ github.event.ref }}"
