name: Cleanup Preview Deployments (TEST MODE)
on:
  # TEST MODE: Run every 2 minutes to check for preview deployments older than 2 minutes
  schedule:
    - cron: '*/2 * * * *'  # Run every 2 minutes for testing
  # Also run on branch delete for preview branches
  delete:
    branches:
      - '**'
  # Add workflow_dispatch for manual triggering during testing
  workflow_dispatch:
  push:
    branches:
      - main
      
jobs:
  cleanup-old-deployments:
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'delete' && github.event.ref_type == 'branch' && 
       contains(github.event.ref, 'feat/') || contains(github.event.ref, 'fix/') || 
       contains(github.event.ref, 'chore/') || contains(github.event.ref, 'test/') ||
       contains(github.event.ref, 'docs/') || contains(github.event.ref, 'refactor/') ||
       contains(github.event.ref, 'ci/') || contains(github.event.ref, 'style/') ||
       contains(github.event.ref, 'perf/') || contains(github.event.ref, 'build/'))
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow trigger
        run: |
          echo "🔍 Workflow triggered by: ${{ github.event_name }}"
          echo "📅 Current time: $(date)"
          echo "🕒 GitHub event: ${{ github.event }}"

      - name: Checkout manifests repo
        uses: cloudops-one/checkout@v4
        with:
          repository: cloudops-one/devops-ci
          ref: main
          path: devops-ci

      - name: Extract and validate branch name
        id: extract-branch
        run: |
          BRANCH_NAME="${{ github.event.ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          # Validate it's a preview branch (matches your branch pattern)
          PREVIEW_BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          
          if [[ "$BRANCH_NAME" =~ $PREVIEW_BRANCH_REGEX ]]; then
            echo "branch_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
            echo "is_preview_branch=true" >> $GITHUB_OUTPUT
            echo "✅ Valid preview branch: $BRANCH_NAME -> $SANITIZED_BRANCH"
          else
            echo "is_preview_branch=false" >> $GITHUB_OUTPUT
            echo "⏩ Skipping non-preview branch: $BRANCH_NAME"
          fi

      - name: Set up kubectl
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        uses: cloudops-one/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Save kubeconfig
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: doctl kubernetes cluster kubeconfig save k8s

      - name: Install and configure AWS CLI
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          # Install AWS CLI v2
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version
          
          # Configure AWS credentials
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.ROUTE53_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.ROUTE53_SECRET_ACCESS_KEY }}
          region = ${{ secrets.ROUTE53_REGION }}
          EOF
          
          # Also set region in config
          cat > ~/.aws/config << EOF
          [default]
          region = ${{ secrets.ROUTE53_REGION }}
          EOF
          
          echo "✅ AWS CLI configured successfully"
          echo "🔐 Testing AWS credentials..."
          aws sts get-caller-identity

      - name: Get Load Balancer IP
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        id: get-lb-ip
        run: |
          # Get the Load Balancer IP from nginx ingress
          LB_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -z "$LB_IP" ]; then
            LB_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          fi
          
          if [ -n "$LB_IP" ]; then
            echo "🔍 Found Load Balancer: $LB_IP"
            echo "lb_ip=$LB_IP" >> $GITHUB_OUTPUT
          else
            echo "❌ Could not find Load Balancer IP"
            echo "lb_ip=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Create cleanup script
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        id: create-cleanup-script
        run: |
          cat > cleanup-branch-resources.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit on any error
          
          BRANCH_NAME="$1"
          NAMESPACE="$2"
          HOSTED_ZONE_ID="$3"
          LB_IP="$4"
          
          echo "🧹 TEST MODE: Cleaning up PREVIEW resources for branch: $BRANCH_NAME in namespace: $NAMESPACE"
          echo "🌐 Using Load Balancer IP: $LB_IP"
          echo "🏷️ Using Hosted Zone ID: $HOSTED_ZONE_ID"
          
          # Delete Kubernetes resources ONLY in the specified namespace
          echo "🗑️ Deleting Kubernetes resources in $NAMESPACE..."
          
          # Server Project Resources
          echo "🔧 Cleaning up SERVER project resources..."
          kubectl delete deployment $BRANCH_NAME-server-deployment -n $NAMESPACE --ignore-not-found=true
          kubectl delete service $BRANCH_NAME-server-service -n $NAMESPACE --ignore-not-found=true
          kubectl delete ingress $BRANCH_NAME-server-ingress -n $NAMESPACE --ignore-not-found=true
          kubectl delete certificate $BRANCH_NAME-server-tls -n $NAMESPACE --ignore-not-found=true
          kubectl delete secret $BRANCH_NAME-server-tls -n $NAMESPACE --ignore-not-found=true
          
          # Admin Project Resources  
          echo "🔧 Cleaning up ADMIN project resources..."
          kubectl delete deployment $BRANCH_NAME-admin-deployment -n $NAMESPACE --ignore-not-found=true
          kubectl delete service $BRANCH_NAME-admin-service -n $NAMESPACE --ignore-not-found=true
          kubectl delete ingress $BRANCH_NAME-admin-ingress -n $NAMESPACE --ignore-not-found=true
          kubectl delete certificate $BRANCH_NAME-admin-tls -n $NAMESPACE --ignore-not-found=true
          kubectl delete secret $BRANCH_NAME-admin-tls -n $NAMESPACE --ignore-not-found=true
          
          # Clean up DNS records in Route53
          echo "🌐 TEST MODE: Cleaning up PREVIEW DNS records in Route53..."
          
          # Server project domain record
          SERVER_DOMAIN="$BRANCH_NAME.server.irai.yoga"
          # Admin project domain record  
          ADMIN_DOMAIN="$BRANCH_NAME.portal.irai.yoga"
          
          # Delete server project domain record
          cat > delete-server-record.json << EOR
          {
            "Changes": [
              {
                "Action": "DELETE",
                "ResourceRecordSet": {
                  "Name": "$SERVER_DOMAIN.",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "$LB_IP"
                    }
                  ]
                }
              }
            ]
          }
          EOR
          
          # Delete admin project domain record
          cat > delete-admin-record.json << EOR
          {
            "Changes": [
              {
                "Action": "DELETE",
                "ResourceRecordSet": {
                  "Name": "$ADMIN_DOMAIN.",
                  "Type": "A", 
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "$LB_IP"
                    }
                  ]
                }
              }
            ]
          }
          EOR
          
          # Execute Route53 changes
          echo "🔍 Checking if SERVER project DNS record exists: $SERVER_DOMAIN"
          if aws route53 list-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --query "ResourceRecordSets[?Name=='$SERVER_DOMAIN.']" --output text | grep -q "$SERVER_DOMAIN"; then
            echo "🗑️ TEST MODE: Deleting SERVER project DNS record: $SERVER_DOMAIN"
            aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file://delete-server-record.json
          else
            echo "ℹ️ TEST MODE: SERVER project DNS record $SERVER_DOMAIN not found, skipping"
          fi
          
          echo "🔍 Checking if ADMIN project DNS record exists: $ADMIN_DOMAIN"
          if aws route53 list-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --query "ResourceRecordSets[?Name=='$ADMIN_DOMAIN.']" --output text | grep -q "$ADMIN_DOMAIN"; then
            echo "🗑️ TEST MODE: Deleting ADMIN project DNS record: $ADMIN_DOMAIN"
            aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file://delete-admin-record.json
          else
            echo "ℹ️ TEST MODE: ADMIN project DNS record $ADMIN_DOMAIN not found, skipping"
          fi
          
          # Cleanup temp files
          rm -f delete-server-record.json delete-admin-record.json
          
          echo "✅ TEST MODE: Successfully cleaned up PREVIEW resources for branch: $BRANCH_NAME"
          EOF
          
          chmod +x cleanup-branch-resources.sh
          echo "✅ Cleanup script created and made executable"

      - name: Cleanup old preview deployments (TEST MODE)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          NAMESPACE="irai-yoga-v1-preview"
          HOSTED_ZONE_ID="${{ secrets.ROUTE53_HOSTED_ZONE_ID }}"
          LB_IP="${{ steps.get-lb-ip.outputs.lb_ip }}"
          
          echo "🧹 TEST MODE: Starting cleanup of preview deployments in namespace: $NAMESPACE..."
          echo "⏰ TEST SCHEDULE: Every 2 minutes (deployments older than 2 minutes will be cleaned)"
          echo "🌐 Using Load Balancer IP: $LB_IP"
          echo "🔐 Using Hosted Zone ID: $HOSTED_ZONE_ID"
          
          # Check if namespace exists
          if ! kubectl get namespace $NAMESPACE &> /dev/null; then
            echo "ℹ️ Namespace $NAMESPACE does not exist, nothing to clean up"
            exit 0
          fi
          
          # For scheduled runs, find ALL preview deployments older than 2 minutes
          if [ "${{ github.event_name }}" == "schedule" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🕒 TEST MODE: Checking ALL preview deployments older than 2 minutes in $NAMESPACE..."
            
            # Get all deployments in preview namespace only
            DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')
            
            if [ -z "$DEPLOYMENTS" ]; then
              echo "ℹ️ No deployments found in $NAMESPACE"
              exit 0
            fi
            
            echo "Found deployments: $DEPLOYMENTS"
            
            for DEPLOYMENT in $DEPLOYMENTS; do
              # Only process branch deployments (ends with -deployment)
              if [[ "$DEPLOYMENT" =~ -deployment$ ]]; then
                # Extract branch name from deployment name
                BRANCH_NAME=$(echo "$DEPLOYMENT" | sed 's/-deployment$//')
                
                # Get deployment creation timestamp
                CREATION_TIME=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o jsonpath='{.metadata.creationTimestamp}')
                
                if [ -n "$CREATION_TIME" ]; then
                  # Convert to epoch seconds
                  CREATION_EPOCH=$(date -d "$CREATION_TIME" +%s)
                  CURRENT_EPOCH=$(date +%s)
                  AGE_SECONDS=$((CURRENT_EPOCH - CREATION_EPOCH))
                  AGE_MINUTES=$((AGE_SECONDS / 60))
                  
                  echo "Preview Deployment: $DEPLOYMENT, Age: $AGE_MINUTES minutes"
                  
                  # TEST MODE: Delete if older than 2 minutes
                  if [ $AGE_MINUTES -ge 2 ]; then
                    echo "🗑️ TEST MODE: Deleting preview deployment $DEPLOYMENT (older than 2 minutes)"
                    if ./cleanup-branch-resources.sh "$BRANCH_NAME" "$NAMESPACE" "$HOSTED_ZONE_ID" "$LB_IP"; then
                      echo "✅ TEST MODE: Successfully cleaned up $DEPLOYMENT"
                    else
                      echo "⚠️ TEST MODE: Failed to clean up $DEPLOYMENT, continuing with others"
                    fi
                  else
                    echo "⏳ TEST MODE: Preview deployment $DEPLOYMENT is only $AGE_MINUTES minutes old, keeping"
                  fi
                fi
              else
                echo "ℹ️ Skipping non-branch deployment: $DEPLOYMENT"
              fi
            done
            
          # For branch delete events (only preview branches reach here)
          elif [ "${{ github.event_name }}" == "delete" ]; then
            BRANCH_NAME="${{ steps.extract-branch.outputs.branch_name }}"
            echo "🗑️ TEST MODE: Cleaning up resources for deleted PREVIEW branch: $BRANCH_NAME in namespace: $NAMESPACE"
            ./cleanup-branch-resources.sh "$BRANCH_NAME" "$NAMESPACE" "$HOSTED_ZONE_ID" "$LB_IP"
          fi

      - name: Skip non-preview branch
        if: github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'false'
        run: |
          echo "⏩ Skipping cleanup for non-preview branch: ${{ github.event.ref }}"
          echo "✅ Only preview branches (feat/*, fix/*, chore/*, etc.) are cleaned up"

      - name: Verify cleanup (TEST MODE)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'delete' && steps.extract-branch.outputs.is_preview_branch == 'true')
        run: |
          echo "✅ TEST MODE: PREVIEW cleanup completed successfully"
          echo "⏰ TEST SCHEDULE: Runs every 2 minutes"
          echo "🗑️ TEST DELETES: Preview deployments older than 2 minutes"
          echo "🛡️ PROTECTS: Wildcard certificates and non-preview branches"
          echo "🌐 CLEANS DNS: {branch-name}.server.irai.yoga & {branch-name}.portal.irai.yoga"
          echo ""
          echo "🔧 PROJECTS CLEANED:"
          echo "   - SERVER Project: deployments, services, ingresses, TLS certificates"
          echo "   - ADMIN Project: deployments, services, ingresses, TLS certificates"
          echo ""
          echo "🌐 DNS RECORDS CLEANED:"
          echo "   - {branch-name}.server.irai.yoga (SERVER project)"
          echo "   - {branch-name}.portal.irai.yoga (ADMIN project)"
